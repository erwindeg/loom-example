/// <reference path="../../../src/typings.d.ts" />
import type { PDFDocument, PDFRef } from 'pdf-lib';
export declare const pdfLib: () => Promise<{
    default: typeof import("pdf-lib/dist/pdf-lib.min.js");
    PDFDocument: typeof PDFDocument;
    PDFFont: typeof import("pdf-lib").PDFFont;
    PDFImage: typeof import("pdf-lib").PDFImage;
    PDFPage: typeof import("pdf-lib").PDFPage;
    PDFEmbeddedPage: typeof import("pdf-lib").PDFEmbeddedPage;
    PDFJavaScript: typeof import("pdf-lib").PDFJavaScript;
    PDFButton: typeof import("pdf-lib").PDFButton;
    PDFCheckBox: typeof import("pdf-lib").PDFCheckBox;
    PDFDropdown: typeof import("pdf-lib").PDFDropdown;
    PDFField: typeof import("pdf-lib").PDFField;
    PDFForm: typeof import("pdf-lib").PDFForm;
    PDFOptionList: typeof import("pdf-lib").PDFOptionList;
    PDFRadioGroup: typeof import("pdf-lib").PDFRadioGroup;
    PDFSignature: typeof import("pdf-lib").PDFSignature;
    PDFTextField: typeof import("pdf-lib").PDFTextField;
    normalizeAppearance: <T>(appearance: T | import("pdf-lib").AppearanceMapping<T>) => import("pdf-lib").AppearanceMapping<T>;
    defaultCheckBoxAppearanceProvider: (checkBox: import("pdf-lib").PDFCheckBox, widget: import("pdf-lib/cjs/core/annotation/PDFWidgetAnnotation").default) => {
        on: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
        off: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    } | import("pdf-lib").AppearanceMapping<{
        on: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
        off: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    }>;
    defaultRadioGroupAppearanceProvider: (radioGroup: import("pdf-lib").PDFRadioGroup, widget: import("pdf-lib/cjs/core/annotation/PDFWidgetAnnotation").default) => {
        on: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
        off: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    } | import("pdf-lib").AppearanceMapping<{
        on: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
        off: import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    }>;
    defaultButtonAppearanceProvider: (button: import("pdf-lib").PDFButton, widget: import("pdf-lib/cjs/core/annotation/PDFWidgetAnnotation").default, font: import("pdf-lib").PDFFont) => import("pdf-lib/cjs/core/operators/PDFOperator").default[] | import("pdf-lib").AppearanceMapping<import("pdf-lib/cjs/core/operators/PDFOperator").default[]>;
    defaultTextFieldAppearanceProvider: (textField: import("pdf-lib").PDFTextField, widget: import("pdf-lib/cjs/core/annotation/PDFWidgetAnnotation").default, font: import("pdf-lib").PDFFont) => import("pdf-lib/cjs/core/operators/PDFOperator").default[] | import("pdf-lib").AppearanceMapping<import("pdf-lib/cjs/core/operators/PDFOperator").default[]>;
    defaultDropdownAppearanceProvider: (dropdown: import("pdf-lib").PDFDropdown, widget: import("pdf-lib/cjs/core/annotation/PDFWidgetAnnotation").default, font: import("pdf-lib").PDFFont) => import("pdf-lib/cjs/core/operators/PDFOperator").default[] | import("pdf-lib").AppearanceMapping<import("pdf-lib/cjs/core/operators/PDFOperator").default[]>;
    defaultOptionListAppearanceProvider: (optionList: import("pdf-lib").PDFOptionList, widget: import("pdf-lib/cjs/core/annotation/PDFWidgetAnnotation").default, font: import("pdf-lib").PDFFont) => import("pdf-lib/cjs/core/operators/PDFOperator").default[] | import("pdf-lib").AppearanceMapping<import("pdf-lib/cjs/core/operators/PDFOperator").default[]>;
    TextAlignment: typeof import("pdf-lib").TextAlignment;
    layoutMultilineText: (text: string, { alignment, fontSize, font, bounds }: import("pdf-lib").LayoutTextOptions) => import("pdf-lib").MultilineTextLayout;
    layoutCombedText: (text: string, { fontSize, font, bounds, cellCount }: import("pdf-lib").LayoutCombedTextOptions) => import("pdf-lib").CombedTextLayout;
    layoutSinglelineText: (text: string, { alignment, fontSize, font, bounds }: import("pdf-lib").LayoutSinglelineTextOptions) => import("pdf-lib").SinglelineTextLayout;
    ColorTypes: typeof import("pdf-lib").ColorTypes;
    grayscale: (gray: number) => import("pdf-lib").Grayscale;
    rgb: (red: number, green: number, blue: number) => import("pdf-lib").RGB;
    cmyk: (cyan: number, magenta: number, yellow: number, key: number) => import("pdf-lib").CMYK;
    setFillingColor: (color: import("pdf-lib").Color) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setStrokingColor: (color: import("pdf-lib").Color) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    componentsToColor: (comps?: number[] | undefined, scale?: number | undefined) => import("pdf-lib").Grayscale | import("pdf-lib").RGB | import("pdf-lib").CMYK | undefined;
    colorToComponents: (color: import("pdf-lib").Color) => number[];
    EncryptedPDFError: typeof import("pdf-lib").EncryptedPDFError;
    FontkitNotRegisteredError: typeof import("pdf-lib").FontkitNotRegisteredError;
    ForeignPageError: typeof import("pdf-lib").ForeignPageError;
    RemovePageFromEmptyDocumentError: typeof import("pdf-lib").RemovePageFromEmptyDocumentError;
    NoSuchFieldError: typeof import("pdf-lib").NoSuchFieldError;
    UnexpectedFieldTypeError: typeof import("pdf-lib").UnexpectedFieldTypeError;
    MissingOnValueCheckError: typeof import("pdf-lib").MissingOnValueCheckError;
    FieldAlreadyExistsError: typeof import("pdf-lib").FieldAlreadyExistsError;
    InvalidFieldNamePartError: typeof import("pdf-lib").InvalidFieldNamePartError;
    FieldExistsAsNonTerminalError: typeof import("pdf-lib").FieldExistsAsNonTerminalError;
    RichTextFieldReadError: typeof import("pdf-lib").RichTextFieldReadError;
    CombedTextLayoutError: typeof import("pdf-lib").CombedTextLayoutError;
    ExceededMaxLengthError: typeof import("pdf-lib").ExceededMaxLengthError;
    InvalidMaxLengthError: typeof import("pdf-lib").InvalidMaxLengthError;
    ImageAlignment: typeof import("pdf-lib").ImageAlignment;
    asPDFName: (name: string | import("pdf-lib/cjs/core/objects/PDFName").default) => import("pdf-lib/cjs/core/objects/PDFName").default;
    asPDFNumber: (num: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/objects/PDFNumber").default;
    asNumber: (num: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => number;
    drawText: (line: import("pdf-lib/cjs/core/objects/PDFHexString").default, options: import("pdf-lib").DrawTextOptions) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawLinesOfText: (lines: import("pdf-lib/cjs/core/objects/PDFHexString").default[], options: import("pdf-lib").DrawLinesOfTextOptions) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawImage: (name: string | import("pdf-lib/cjs/core/objects/PDFName").default, options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        rotate: import("pdf-lib").Rotation;
        xSkew: import("pdf-lib").Rotation;
        ySkew: import("pdf-lib").Rotation;
        graphicsState?: string | import("pdf-lib/cjs/core/objects/PDFName").default | undefined;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawPage: (name: string | import("pdf-lib/cjs/core/objects/PDFName").default, options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        xScale: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        yScale: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        rotate: import("pdf-lib").Rotation;
        xSkew: import("pdf-lib").Rotation;
        ySkew: import("pdf-lib").Rotation;
        graphicsState?: string | import("pdf-lib/cjs/core/objects/PDFName").default | undefined;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawLine: (options: {
        start: {
            x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
            y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        };
        end: {
            x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
            y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        };
        thickness: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        color: import("pdf-lib").Color | undefined;
        dashArray?: (number | import("pdf-lib/cjs/core/objects/PDFNumber").default)[] | undefined;
        dashPhase?: number | import("pdf-lib/cjs/core/objects/PDFNumber").default | undefined;
        lineCap?: import("pdf-lib").LineCapStyle | undefined;
        graphicsState?: string | import("pdf-lib/cjs/core/objects/PDFName").default | undefined;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawRectangle: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        rotate: import("pdf-lib").Rotation;
        xSkew: import("pdf-lib").Rotation;
        ySkew: import("pdf-lib").Rotation;
        borderLineCap?: import("pdf-lib").LineCapStyle | undefined;
        borderDashArray?: (number | import("pdf-lib/cjs/core/objects/PDFNumber").default)[] | undefined;
        borderDashPhase?: number | import("pdf-lib/cjs/core/objects/PDFNumber").default | undefined;
        graphicsState?: string | import("pdf-lib/cjs/core/objects/PDFName").default | undefined;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawEllipsePath: (config: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        xScale: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        yScale: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawEllipse: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        xScale: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        yScale: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        rotate?: import("pdf-lib").Rotation | undefined;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderDashArray?: (number | import("pdf-lib/cjs/core/objects/PDFNumber").default)[] | undefined;
        borderDashPhase?: number | import("pdf-lib/cjs/core/objects/PDFNumber").default | undefined;
        graphicsState?: string | import("pdf-lib/cjs/core/objects/PDFName").default | undefined;
        borderLineCap?: import("pdf-lib").LineCapStyle | undefined;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawSvgPath: (path: string, options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        rotate?: import("pdf-lib").Rotation | undefined;
        scale: number | import("pdf-lib/cjs/core/objects/PDFNumber").default | undefined;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderDashArray?: (number | import("pdf-lib/cjs/core/objects/PDFNumber").default)[] | undefined;
        borderDashPhase?: number | import("pdf-lib/cjs/core/objects/PDFNumber").default | undefined;
        borderLineCap?: import("pdf-lib").LineCapStyle | undefined;
        graphicsState?: string | import("pdf-lib/cjs/core/objects/PDFName").default | undefined;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawCheckMark: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        size: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        thickness: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        color: import("pdf-lib").Color | undefined;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    rotateInPlace: (options: {
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        rotation: 0 | 90 | 180 | 270;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawCheckBox: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        thickness: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        markColor: import("pdf-lib").Color | undefined;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        filled: boolean;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawRadioButton: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        dotColor: import("pdf-lib").Color | undefined;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        filled: boolean;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawButton: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        textLines: {
            encoded: import("pdf-lib/cjs/core/objects/PDFHexString").default;
            x: number;
            y: number;
        }[];
        textColor: import("pdf-lib").Color;
        font: string | import("pdf-lib/cjs/core/objects/PDFName").default;
        fontSize: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawTextLines: (lines: {
        encoded: import("pdf-lib/cjs/core/objects/PDFHexString").default;
        x: number;
        y: number;
    }[], options: import("pdf-lib").DrawTextLinesOptions) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawTextField: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        textLines: {
            encoded: import("pdf-lib/cjs/core/objects/PDFHexString").default;
            x: number;
            y: number;
        }[];
        textColor: import("pdf-lib").Color;
        font: string | import("pdf-lib/cjs/core/objects/PDFName").default;
        fontSize: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        padding: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    drawOptionList: (options: {
        x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        borderWidth: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        color: import("pdf-lib").Color | undefined;
        borderColor: import("pdf-lib").Color | undefined;
        textLines: {
            encoded: import("pdf-lib/cjs/core/objects/PDFHexString").default;
            x: number;
            y: number;
            height: number;
        }[];
        textColor: import("pdf-lib").Color;
        font: string | import("pdf-lib/cjs/core/objects/PDFName").default;
        fontSize: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        lineHeight: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
        selectedLines: number[];
        selectedColor: import("pdf-lib").Color;
        padding: number | import("pdf-lib/cjs/core/objects/PDFNumber").default;
    }) => import("pdf-lib/cjs/core/operators/PDFOperator").default[];
    clip: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    clipEvenOdd: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    concatTransformationMatrix: (a: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, b: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, c: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, d: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, e: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, f: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    translate: (xPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, yPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    scale: (xPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, yPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    rotateRadians: (angle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    rotateDegrees: (angle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    skewRadians: (xSkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, ySkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    skewDegrees: (xSkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, ySkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setDashPattern: (dashArray: (number | import("pdf-lib/cjs/core/objects/PDFNumber").default)[], dashPhase: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    restoreDashPattern: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    LineCapStyle: typeof import("pdf-lib").LineCapStyle;
    setLineCap: (style: import("pdf-lib").LineCapStyle) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    LineJoinStyle: typeof import("pdf-lib").LineJoinStyle;
    setLineJoin: (style: import("pdf-lib").LineJoinStyle) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setGraphicsState: (state: string | import("pdf-lib/cjs/core/objects/PDFName").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    pushGraphicsState: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    popGraphicsState: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setLineWidth: (width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    appendBezierCurve: (x1: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y1: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, x2: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y2: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, x3: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y3: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    appendQuadraticCurve: (x1: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y1: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, x2: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y2: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    closePath: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    moveTo: (xPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, yPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    lineTo: (xPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, yPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    rectangle: (xPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, yPos: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, width: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, height: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    square: (xPos: number, yPos: number, size: number) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    stroke: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    fill: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    fillAndStroke: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    endPath: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    nextLine: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    moveText: (x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    showText: (text: import("pdf-lib/cjs/core/objects/PDFHexString").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    beginText: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    endText: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setFontAndSize: (name: string | import("pdf-lib/cjs/core/objects/PDFName").default, size: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setCharacterSpacing: (spacing: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setWordSpacing: (spacing: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setCharacterSqueeze: (squeeze: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setLineHeight: (lineHeight: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setTextRise: (rise: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    TextRenderingMode: typeof import("pdf-lib").TextRenderingMode;
    setTextRenderingMode: (mode: import("pdf-lib").TextRenderingMode) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setTextMatrix: (a: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, b: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, c: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, d: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, e: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, f: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    rotateAndSkewTextRadiansAndTranslate: (rotationAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, xSkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, ySkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    rotateAndSkewTextDegreesAndTranslate: (rotationAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, xSkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, ySkewAngle: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, x: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, y: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    drawObject: (name: string | import("pdf-lib/cjs/core/objects/PDFName").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setFillingGrayscaleColor: (gray: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setStrokingGrayscaleColor: (gray: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setFillingRgbColor: (red: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, green: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, blue: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setStrokingRgbColor: (red: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, green: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, blue: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setFillingCmykColor: (cyan: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, magenta: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, yellow: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, key: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    setStrokingCmykColor: (cyan: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, magenta: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, yellow: number | import("pdf-lib/cjs/core/objects/PDFNumber").default, key: number | import("pdf-lib/cjs/core/objects/PDFNumber").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    beginMarkedContent: (tag: string | import("pdf-lib/cjs/core/objects/PDFName").default) => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    endMarkedContent: () => import("pdf-lib/cjs/core/operators/PDFOperator").default;
    RotationTypes: typeof import("pdf-lib").RotationTypes;
    radians: (radianAngle: number) => import("pdf-lib").Radians;
    degrees: (degreeAngle: number) => import("pdf-lib").Degrees;
    degreesToRadians: (degree: number) => number;
    radiansToDegrees: (radian: number) => number;
    toRadians: (rotation: import("pdf-lib").Rotation) => number;
    toDegrees: (rotation: import("pdf-lib").Rotation) => number;
    reduceRotation: (degreeAngle?: number | undefined) => 0 | 90 | 180 | 270;
    adjustDimsForRotation: (dims: {
        width: number;
        height: number;
    }, degreeAngle?: number | undefined) => {
        width: number;
        height: number;
    };
    rotateRectangle: (rectangle: {
        x: number;
        y: number;
        width: number;
        height: number;
    }, borderWidth?: number | undefined, degreeAngle?: number | undefined) => {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    PageSizes: {
        '4A0': [number, number];
        '2A0': [number, number];
        A0: [number, number];
        A1: [number, number];
        A2: [number, number];
        A3: [number, number];
        A4: [number, number];
        A5: [number, number];
        A6: [number, number];
        A7: [number, number];
        A8: [number, number];
        A9: [number, number];
        A10: [number, number];
        B0: [number, number];
        B1: [number, number];
        B2: [number, number];
        B3: [number, number];
        B4: [number, number];
        B5: [number, number];
        B6: [number, number];
        B7: [number, number];
        B8: [number, number];
        B9: [number, number];
        B10: [number, number];
        C0: [number, number];
        C1: [number, number];
        C2: [number, number];
        C3: [number, number];
        C4: [number, number];
        C5: [number, number];
        C6: [number, number];
        C7: [number, number];
        C8: [number, number];
        C9: [number, number];
        C10: [number, number];
        RA0: [number, number];
        RA1: [number, number];
        RA2: [number, number];
        RA3: [number, number];
        RA4: [number, number];
        SRA0: [number, number];
        SRA1: [number, number];
        SRA2: [number, number];
        SRA3: [number, number];
        SRA4: [number, number];
        Executive: [number, number];
        Folio: [number, number];
        Legal: [number, number];
        Letter: [number, number];
        Tabloid: [number, number];
    };
    BlendMode: typeof import("pdf-lib").BlendMode;
    ParseSpeeds: typeof import("pdf-lib").ParseSpeeds;
    StandardFonts: typeof import("pdf-lib").StandardFonts;
    CharCodes: typeof import("pdf-lib/cjs/core/syntax/CharCodes").default;
    PDFContext: typeof import("pdf-lib/cjs/core/PDFContext").default;
    PDFObjectCopier: typeof import("pdf-lib/cjs/core/PDFObjectCopier").default;
    PDFWriter: typeof import("pdf-lib/cjs/core/writers/PDFWriter").default;
    PDFStreamWriter: typeof import("pdf-lib/cjs/core/writers/PDFStreamWriter").default;
    PDFHeader: typeof import("pdf-lib/cjs/core/document/PDFHeader").default;
    PDFTrailer: typeof import("pdf-lib/cjs/core/document/PDFTrailer").default;
    PDFTrailerDict: typeof import("pdf-lib/cjs/core/document/PDFTrailerDict").default;
    PDFCrossRefSection: typeof import("pdf-lib/cjs/core/document/PDFCrossRefSection").default;
    StandardFontEmbedder: typeof import("pdf-lib/cjs/core/embedders/StandardFontEmbedder").default;
    CustomFontEmbedder: typeof import("pdf-lib/cjs/core/embedders/CustomFontEmbedder").default;
    CustomFontSubsetEmbedder: typeof import("pdf-lib/cjs/core/embedders/CustomFontSubsetEmbedder").default;
    FileEmbedder: typeof import("pdf-lib/cjs/core/embedders/FileEmbedder").default;
    AFRelationship: typeof import("pdf-lib").AFRelationship;
    JpegEmbedder: typeof import("pdf-lib/cjs/core/embedders/JpegEmbedder").default;
    PngEmbedder: typeof import("pdf-lib/cjs/core/embedders/PngEmbedder").default;
    PDFPageEmbedder: typeof import("pdf-lib/cjs/core/embedders/PDFPageEmbedder").default;
    ViewerPreferences: typeof import("pdf-lib/cjs/core/interactive/ViewerPreferences").default;
    NonFullScreenPageMode: typeof import("pdf-lib").NonFullScreenPageMode;
    ReadingDirection: typeof import("pdf-lib").ReadingDirection;
    PrintScaling: typeof import("pdf-lib").PrintScaling;
    Duplex: typeof import("pdf-lib").Duplex;
    PDFObject: typeof import("pdf-lib/cjs/core/objects/PDFObject").default;
    PDFBool: typeof import("pdf-lib/cjs/core/objects/PDFBool").default;
    PDFNumber: typeof import("pdf-lib/cjs/core/objects/PDFNumber").default;
    PDFString: typeof import("pdf-lib/cjs/core/objects/PDFString").default;
    PDFHexString: typeof import("pdf-lib/cjs/core/objects/PDFHexString").default;
    PDFName: typeof import("pdf-lib/cjs/core/objects/PDFName").default;
    PDFNull: {
        asNull(): null;
        clone(): any;
        toString(): string;
        sizeInBytes(): number;
        copyBytesInto(buffer: Uint8Array, offset: number): number;
    };
    PDFArray: typeof import("pdf-lib/cjs/core/objects/PDFArray").default;
    PDFDict: typeof import("pdf-lib/cjs/core/objects/PDFDict").default;
    PDFRef: typeof PDFRef;
    PDFInvalidObject: typeof import("pdf-lib/cjs/core/objects/PDFInvalidObject").default;
    PDFStream: typeof import("pdf-lib/cjs/core/objects/PDFStream").default;
    PDFRawStream: typeof import("pdf-lib/cjs/core/objects/PDFRawStream").default;
    PDFCatalog: typeof import("pdf-lib/cjs/core/structures/PDFCatalog").default;
    PDFContentStream: typeof import("pdf-lib/cjs/core/structures/PDFContentStream").default;
    PDFCrossRefStream: typeof import("pdf-lib/cjs/core/structures/PDFCrossRefStream").default;
    PDFObjectStream: typeof import("pdf-lib/cjs/core/structures/PDFObjectStream").default;
    PDFPageTree: typeof import("pdf-lib/cjs/core/structures/PDFPageTree").default;
    PDFPageLeaf: typeof import("pdf-lib/cjs/core/structures/PDFPageLeaf").default;
    PDFFlateStream: typeof import("pdf-lib/cjs/core/structures/PDFFlateStream").default;
    PDFOperator: typeof import("pdf-lib/cjs/core/operators/PDFOperator").default;
    PDFOperatorNames: typeof import("pdf-lib/cjs/core/operators/PDFOperatorNames").default;
    PDFObjectParser: typeof import("pdf-lib/cjs/core/parser/PDFObjectParser").default;
    PDFObjectStreamParser: typeof import("pdf-lib/cjs/core/parser/PDFObjectStreamParser").default;
    PDFParser: typeof import("pdf-lib/cjs/core/parser/PDFParser").default;
    PDFXRefStreamParser: typeof import("pdf-lib/cjs/core/parser/PDFXRefStreamParser").default;
    decodePDFRawStream: ({ dict, contents }: import("pdf-lib/cjs/core/objects/PDFRawStream").default) => import("pdf-lib/cjs/core/streams/Stream").StreamType;
    MethodNotImplementedError: typeof import("pdf-lib").MethodNotImplementedError;
    PrivateConstructorError: typeof import("pdf-lib").PrivateConstructorError;
    UnexpectedObjectTypeError: typeof import("pdf-lib").UnexpectedObjectTypeError;
    UnsupportedEncodingError: typeof import("pdf-lib").UnsupportedEncodingError;
    ReparseError: typeof import("pdf-lib").ReparseError;
    MissingCatalogError: typeof import("pdf-lib").MissingCatalogError;
    MissingPageContentsEmbeddingError: typeof import("pdf-lib").MissingPageContentsEmbeddingError;
    UnrecognizedStreamTypeError: typeof import("pdf-lib").UnrecognizedStreamTypeError;
    PageEmbeddingMismatchedContextError: typeof import("pdf-lib").PageEmbeddingMismatchedContextError;
    PDFArrayIsNotRectangleError: typeof import("pdf-lib").PDFArrayIsNotRectangleError;
    InvalidPDFDateStringError: typeof import("pdf-lib").InvalidPDFDateStringError;
    InvalidTargetIndexError: typeof import("pdf-lib").InvalidTargetIndexError;
    CorruptPageTreeError: typeof import("pdf-lib").CorruptPageTreeError;
    IndexOutOfBoundsError: typeof import("pdf-lib").IndexOutOfBoundsError;
    InvalidAcroFieldValueError: typeof import("pdf-lib").InvalidAcroFieldValueError;
    MultiSelectValueError: typeof import("pdf-lib").MultiSelectValueError;
    MissingDAEntryError: typeof import("pdf-lib").MissingDAEntryError;
    MissingTfOperatorError: typeof import("pdf-lib").MissingTfOperatorError;
    NumberParsingError: typeof import("pdf-lib").NumberParsingError;
    PDFParsingError: typeof import("pdf-lib").PDFParsingError;
    NextByteAssertionError: typeof import("pdf-lib").NextByteAssertionError;
    PDFObjectParsingError: typeof import("pdf-lib").PDFObjectParsingError;
    PDFInvalidObjectParsingError: typeof import("pdf-lib").PDFInvalidObjectParsingError;
    PDFStreamParsingError: typeof import("pdf-lib").PDFStreamParsingError;
    UnbalancedParenthesisError: typeof import("pdf-lib").UnbalancedParenthesisError;
    StalledParserError: typeof import("pdf-lib").StalledParserError;
    MissingPDFHeaderError: typeof import("pdf-lib").MissingPDFHeaderError;
    MissingKeywordError: typeof import("pdf-lib").MissingKeywordError;
    PDFAnnotation: typeof import("pdf-lib/cjs/core/annotation/PDFAnnotation").default;
    PDFWidgetAnnotation: typeof import("pdf-lib/cjs/core/annotation/PDFWidgetAnnotation").default;
    AppearanceCharacteristics: typeof import("pdf-lib/cjs/core/annotation/AppearanceCharacteristics").default;
    AnnotationFlags: typeof import("pdf-lib").AnnotationFlags;
    PDFAcroButton: typeof import("pdf-lib/cjs/core/acroform/PDFAcroButton").default;
    PDFAcroCheckBox: typeof import("pdf-lib/cjs/core/acroform/PDFAcroCheckBox").default;
    PDFAcroChoice: typeof import("pdf-lib/cjs/core/acroform/PDFAcroChoice").default;
    PDFAcroComboBox: typeof import("pdf-lib/cjs/core/acroform/PDFAcroComboBox").default;
    PDFAcroField: typeof import("pdf-lib/cjs/core/acroform/PDFAcroField").default;
    PDFAcroForm: typeof import("pdf-lib/cjs/core/acroform/PDFAcroForm").default;
    PDFAcroListBox: typeof import("pdf-lib/cjs/core/acroform/PDFAcroListBox").default;
    PDFAcroNonTerminal: typeof import("pdf-lib/cjs/core/acroform/PDFAcroNonTerminal").default;
    PDFAcroPushButton: typeof import("pdf-lib/cjs/core/acroform/PDFAcroPushButton").default;
    PDFAcroRadioButton: typeof import("pdf-lib/cjs/core/acroform/PDFAcroRadioButton").default;
    PDFAcroSignature: typeof import("pdf-lib/cjs/core/acroform/PDFAcroSignature").default;
    PDFAcroTerminal: typeof import("pdf-lib/cjs/core/acroform/PDFAcroTerminal").default;
    PDFAcroText: typeof import("pdf-lib/cjs/core/acroform/PDFAcroText").default;
    AcroFieldFlags: typeof import("pdf-lib").AcroFieldFlags;
    AcroButtonFlags: typeof import("pdf-lib").AcroButtonFlags;
    AcroTextFlags: typeof import("pdf-lib").AcroTextFlags;
    AcroChoiceFlags: typeof import("pdf-lib").AcroChoiceFlags;
    createPDFAcroFields: (kidDicts?: import("pdf-lib/cjs/core/objects/PDFArray").default | undefined) => [import("pdf-lib/cjs/core/acroform/PDFAcroField").default, PDFRef][];
    createPDFAcroField: (dict: import("pdf-lib/cjs/core/objects/PDFDict").default, ref: PDFRef) => import("pdf-lib/cjs/core/acroform/PDFAcroField").default;
    Cache: typeof import("pdf-lib/cjs/utils/Cache").default;
    last: <T_1>(array: T_1[]) => T_1;
    typedArrayFor: (value: string | Uint8Array) => Uint8Array;
    mergeIntoTypedArray: (...arrays: (string | Uint8Array)[]) => Uint8Array;
    mergeUint8Arrays: (arrays: Uint8Array[]) => Uint8Array;
    arrayAsString: (array: Uint8Array | number[]) => string;
    byAscendingId: <T_2 extends {
        id: any;
    }>(a: T_2, b: T_2) => number;
    sortedUniq: <T_3>(array: T_3[], indexer: (elem: T_3) => any) => T_3[];
    reverseArray: (array: Uint8Array) => Uint8Array;
    sum: (array: Uint8Array | number[]) => number;
    range: (start: number, end: number) => number[];
    pluckIndices: <T_4>(arr: T_4[], indices: number[]) => T_4[];
    canBeConvertedToUint8Array: (input: any) => input is string | Uint8Array | ArrayBuffer;
    toUint8Array: (input: string | Uint8Array | ArrayBuffer) => Uint8Array;
    waitForTick: () => Promise<void>;
    toCharCode: (character: string) => number;
    toCodePoint: (character: string) => number | undefined;
    toHexStringOfMinLength: (num: number, minLength: number) => string;
    toHexString: (num: number) => string;
    charFromCode: (code: number) => string;
    charFromHexCode: (hex: string) => string;
    padStart: (value: string, length: number, padChar: string) => string;
    copyStringIntoBuffer: (str: string, buffer: Uint8Array, offset: number) => number;
    addRandomSuffix: (prefix: string, suffixLength?: number | undefined) => string;
    escapeRegExp: (str: string) => string;
    cleanText: (text: string) => string;
    escapedNewlineChars: string[];
    newlineChars: string[];
    isNewlineChar: (text: string) => boolean;
    lineSplit: (text: string) => string[];
    mergeLines: (text: string) => string;
    charAtIndex: (text: string, index: number) => [string, number];
    charSplit: (text: string) => string[];
    breakTextIntoLines: (text: string, wordBreaks: string[], maxWidth: number, computeWidthOfText: (t: string) => number) => string[];
    parseDate: (dateStr: string) => Date | undefined;
    findLastMatch: (value: string, regex: RegExp) => {
        match: RegExpMatchArray | undefined;
        pos: number;
    };
    utf8Encode: (input: string, byteOrderMark?: boolean | undefined) => Uint8Array;
    utf16Encode: (input: string, byteOrderMark?: boolean | undefined) => Uint16Array;
    isWithinBMP: (codePoint: number) => boolean;
    hasSurrogates: (codePoint: number) => boolean;
    highSurrogate: (codePoint: number) => number;
    lowSurrogate: (codePoint: number) => number;
    utf16Decode: (input: Uint8Array, byteOrderMark?: boolean | undefined) => string;
    hasUtf16BOM: (bytes: Uint8Array) => boolean;
    numberToString: (num: number) => string;
    sizeInBytes: (n: number) => number;
    bytesFor: (n: number) => Uint8Array;
    error: (msg: string) => never;
    encodeToBase64: (bytes: Uint8Array) => string;
    decodeFromBase64: (base64: string) => Uint8Array;
    decodeFromBase64DataUri: (dataUri: string) => Uint8Array;
    values: (obj: any) => any[];
    StandardFontValues: any[];
    isStandardFont: (input: any) => input is import("@pdf-lib/standard-fonts").FontNames;
    rectanglesAreEqual: (a: {
        x: number;
        y: number;
        width: number;
        height: number;
    }, b: {
        x: number;
        y: number;
        width: number;
        height: number;
    }) => boolean;
    backtick: (val: any) => string;
    singleQuote: (val: any) => string;
    createValueErrorMsg: (value: any, valueName: string, values: (string | number | boolean | null | undefined)[]) => string;
    assertIsOneOf: (value: any, valueName: string, allowedValues: (string | number | boolean | null | undefined)[] | {
        [key: string]: string | number | boolean | null | undefined;
    }) => void;
    assertIsOneOfOrUndefined: (value: any, valueName: string, allowedValues: (string | number | boolean | null | undefined)[] | {
        [key: string]: string | number | boolean | null | undefined;
    }) => void;
    assertIsSubset: (values: any[], valueName: string, allowedValues: (string | number | boolean | null | undefined)[] | {
        [key: string]: string | number | boolean | null | undefined;
    }) => void;
    getType: (val: any) => any;
    isType: (value: any, type: import("pdf-lib").TypeDescriptor) => boolean;
    createTypeErrorMsg: (value: any, valueName: string, types: import("pdf-lib").TypeDescriptor[]) => string;
    assertIs: (value: any, valueName: string, types: import("pdf-lib").TypeDescriptor[]) => void;
    assertOrUndefined: (value: any, valueName: string, types: import("pdf-lib").TypeDescriptor[]) => void;
    assertEachIs: (values: any[], valueName: string, types: import("pdf-lib").TypeDescriptor[]) => void;
    assertRange: (value: any, valueName: string, min: number, max: number) => void;
    assertRangeOrUndefined: (value: any, valueName: string, min: number, max: number) => void;
    assertMultiple: (value: any, valueName: string, multiplier: number) => void;
    assertInteger: (value: any, valueName: string) => void;
    assertPositive: (value: number, valueName: string) => void;
    pdfDocEncodingDecode: (bytes: Uint8Array) => string;
}>;
type PDFOutlineTo = number | [pageIndex: number, xPercentage: number, yPercentage: number];
export interface PDFOutlineItem {
    title: string;
    to: PDFOutlineTo;
    italic?: boolean;
    bold?: boolean;
}
export interface PDFOutlineItemWithChildren extends Omit<PDFOutlineItem, 'to'> {
    to?: PDFOutlineTo;
    children: PDFOutline[];
    open: boolean;
}
export type PDFOutline = PDFOutlineItem | PDFOutlineItemWithChildren;
export declare const setOutline: (doc: PDFDocument, outlines: readonly PDFOutline[]) => Promise<void>;
export {};
